name: OrangeHRM Automation Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Executa diariamente √†s 2:00 AM UTC

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10']
        browser: [chrome, firefox]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install Allure
      run: |
        # Instalar Allure via npm (mais confi√°vel no GitHub Actions)
        curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
        sudo apt-get install -y nodejs
        sudo npm install -g allure-commandline
        # Verificar se o Allure foi instalado corretamente
        allure --version
    
    - name: Install Chrome
      if: matrix.browser == 'chrome'
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
    
    - name: Install Firefox
      if: matrix.browser == 'firefox'
      run: |
        sudo apt-get update
        sudo apt-get install -y firefox
    
    - name: Create results directory
      run: |
        mkdir -p results/screenshots
        mkdir -p results/allure-results
    
    - name: Run BDD tests with Behave
      run: |
        HEADLESS=true behave features/ --format allure_behave.formatter:AllureFormatter -o results/allure-results
      continue-on-error: true
    
    - name: Generate Allure Report
      if: always()
      run: |
        # Verificar se existem resultados do Allure
        if [ -d "results/allure-results" ] && [ "$(ls -A results/allure-results)" ]; then
          echo "Gerando relat√≥rio Allure..."
          allure generate results/allure-results --clean -o results/allure-report
        else
          echo "Nenhum resultado do Allure encontrado, criando relat√≥rio vazio..."
          mkdir -p results/allure-report
          echo "<html><body><h1>Nenhum teste executado</h1></body></html>" > results/allure-report/index.html
        fi
    
    - name: Upload Allure Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: allure-report-${{ matrix.python-version }}-${{ matrix.browser }}
        path: results/allure-report/
    
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.python-version }}-${{ matrix.browser }}
        path: results/
    
    - name: Upload Screenshots
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: screenshots-${{ matrix.python-version }}-${{ matrix.browser }}
        path: results/screenshots/
    
    - name: Comment PR with test results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Verificar se existem resultados de teste
          const resultsPath = 'results/';
          if (fs.existsSync(resultsPath)) {
            const files = fs.readdirSync(resultsPath);
            const hasResults = files.some(file => file.endsWith('.html') || file.endsWith('.xml'));
            
            if (hasResults) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## üß™ Test Results
                
                **Python Version:** ${{ matrix.python-version }}
                **Browser:** ${{ matrix.browser }}
                
                ‚úÖ Testes executados com sucesso!
                
                üìä Relat√≥rios dispon√≠veis nos artifacts.`
              });
            }
          }

  # Deploy report desabilitado temporariamente
  # Para habilitar GitHub Pages, configure as permiss√µes no reposit√≥rio
  # Settings > Pages > Source: GitHub Actions
  deploy-report:
    needs: test
    runs-on: ubuntu-latest
    if: false  # Desabilitado temporariamente
    
    steps:
    - name: Deploy disabled
      run: echo "Deploy para GitHub Pages desabilitado temporariamente"
